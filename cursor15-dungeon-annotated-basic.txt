0 POKE59468,12 		# set computer into graphics mode
1 REM DUNGEON COPYRIGHT (C) 1979 BRIAN SAWYER
2 REM 1310 DOVER HILL ROAD
3 REM SANTA BARBARA, CA. 93103
4 :
5 REM CURSOR #15, NOV/DEC 1979
6 REM BOX 550, GOLETA, CA. 93017
7 REM LINES 61000-65000 (C) 1979 CURSOR MAGAZINE

# display related - program name for std CURSOR display
# Cursor issue #
90 PG$="DUNGEON":NM$="15":GOSUB62000

==> GOSUB 62000
# Print mag info 
====> GOSUB 60500
# print a line of 40 graphic chars (CHR$192) 
<==== RETURN TO 62030
++++> GOTO 60300
# Clear variables and screen
======> GOSUB 60400
# Determine which version of BASIC we have and set key vars 
# to get sys related info later on.
<====== RETURN TO 60300
++++> GOTO 100
# What happens to the stack w/the original gosub back in line 90?
# The CLR in 60300 zaps the stack. So here we are...

# Key variables used for screen size and amount of memory needed
# for the in-memory dungeon map.
100 RS=23: CS=40: SZ=RS*CS: BL=(25-RS)*40:RS=RS-1:CS=CS-1
$ SZ will equal 920
$ BL = 80
$ RS = 22
$ CS = 39

# In PET, strings are stored at end of memory and pointers are stored lower
# (closer to beginning) to those strings. 
# Brian intends on storing the in-memory map as far down in memory as he
# can. 
# Not quite sure why he did this... as the "end of memory" is set
# later on line 200. Maybe he forgot he did one or the other?
130 REM TRICK: DG$() STRINGS GO AT END OF MEMORY!
140 DIMDG$(24):E$="                                        "
150 FORI=0TO24:DG$(I)=E$+"":NEXTI

# Setting up 2 status bars lines and set screen.
160 ER$="{HOME}{DOWN}                                       {HOME}{DOWN}"
170 E2$="{HOME}                                       {HOME}"
180 PRINT"{CLEAR}SETTING UP..."

# AX is assumed screen ram location
# This seems to look at the point for "Top of memory" which is also
# where screen ram starts, then backs off 920.
# running this on emulator gives me 31848
190 TS=PEEK(QM)+256*PEEK(QM+1)-SZ:AX=32768
$ TS=PEEK(52)+256*PEEK(52+1)-920:AX=32768
$ TS = 31848

# Putting spaces into this memory - perhaps to clear the in-mem map?
200 FOR I= TS + 40 TO TS + SZ-41:POKEI,32:NEXTI
$ FOR I= 31848 + 40 TO 31848 + 920 - 41:POKEI,32:NEXTI

210 HP=50:MG=0:EX=0:PX=0:HG=0:Z=0:FG=0:K1=0:E=0:S=0:W=160:ET=160
#* HP is player hit points
#* MG is gold recovered
#* EX is experience earned
#* HG is hidden gold (max of 11)
#* Z is number of monsters killed
#* W is for what was in the space that the player just moved
#* K1 is how much gold has been uncovered
#* FG is found gold flag - used for showing "Gold is near" text
#  E is current monster location
#  PX is value needed for player to level up
#  S is ...
#  ET is NEVER USED! 
# There are other values sprinkled around that are initialized and 
# used globally later, mostly for monster stats.

# 220 is related to timer and how long of a pause for printing messages or 
# getting input. TI was a magic BASIC variable that gave number of "jiffies"
# See Commodore documentation on that lovely concept.
220 TI$="000000":TM=TI+3600

# Build the Dungeon!!
230 GOSUB 380

==>380
  Generate the dungeon
<== RETURN FROM 380 <==

240 TS = TS - BL
$ 31848 = 31848 - 80 
$ TS = 31768   # Now 1000 away from AX/32768

#* Where to put the player? L is (L)ocation
250 L=INT(RND(1)*SZ+TS):IFPEEK(L)<>160THEN250

#* Put player onto the screen and reset W to be 160
260 TM=0:GOSUB1410:L=L+AX-TS:W=PEEK(L):GOSUB600:POKEL,209:W=160
# AX is start of screen mem. 
# Look at the screen/player map to see what is at L. 
# W is what is on the map prior to 'gosub 600', which is the player map
# display/movement loop, I think. Once we've done all that, put the player
# token down, which is a dot (but ends up being a reversed dot?) 
# and then W will be 160 (floor) again.

==> GOSUB 1410
Timer to slow things down
<== RETURN FROM 1410

==> GOSUB 600
# Compute effect of putting player on screen... what can they see around
# them initially?
!!!! NEED TO DO !!!!
<== RETURN from 600 back to 260

#* Start of input loop
# These two pokes set the keyboard buffer count to 0
# and set the "key pressed" to be nothing (FF)
270 POKEQK,0:POKEQP,255:GOSUB1240
$ QK = 158
$ QP = 151 

==> GOSUB 1240 
   GET PLAYER MOVE, direction move stored in A. Also, SM might be set to 1
<== RETURN FROM 1240

#* Movement costs HP! Moreso if moving shifted through the dark spaces
# If HP<0, then you're dead! 1190 is death sequence.
280 HP=HP-.15-2*SX:IFHP<0THEN1190

#* Are we moving? If so, are we moving into a space between floors? If so, 
# are we in shift mode? If not, ignore the entry.
# Did we hit an impassable border (around the map)?
# If so, ignore the entry
# going back to 270 is back to beginning of input loop
# Here's the deal about line 290
# It takes your 1-9 input and through this little trick, converts it 
# into the number of memory positions you're moving. If we go back to thinking
# of this as a grid 40cols x 25rows display - then hitting 6 moves you right (+1)
# position. Hitting 1 (diagonal down/left) moves you +39 positions. It's very
# clever!
290 Q=VAL(MID$("808182404142000102",A*2-1,2))-41
300 IF(PEEK(L+Q)=32)AND(SX<>1)THEN270
310 IFPEEK(L+Q)=127THEN270

#*Move the player 
320 POKEL,W:L=L+Q:W=PEEK(L):POKEL,209:GOSUB600:POKEL,209

==> GOSUB 600
# What does the player see? Activate the last monster revealed, 
# set up the random gold value to be found.
<== RETURN FROM 600

#* If we found gold..
330 IFW=135THENGOSUB1200

==> GOSUB 1200
# We found gold sub
<== RETURN 1200 to 330

# If we move onto a monster - attack routine!
340 IFW>=214ANDW<=219THENGOSUB1000

==> GOSUB 1000
# A fight! Who will win?
<== RETURN FROM 1000

!!!! NEED TO DO !!!!
350 IFE>0THENS=S+1
360 IFS>1THENGOSUB830

==> GOSUB 830
# Finally, the monsters move, if they've seen the player...
!!!! NEED TO DO !!!!
<== RETURN FROM 830

# Continue game!
370 GOTO270
# == End of game loop


#* SUB - Build the dungeon
380 PRINT INT((TM-TI)/60);"{LEFT}  {UP}"  #print the countdown

#* Generate width/length of a room
400 W=INT(RND(1)*9+2):L=INT(RND(1)*9+2)
#* RND(1) = 0.999 - .999 * 9 + 2 = 10 - so rooms no more than 10x10? perhaps?
$ W = 6 (cols)
$ L = 4 (rows)

# Calculate where on map room will be
410 R0=INT(RND(1)*(RS-L-1))+1:C0=INT(RND(1)*(CS-W-1))+1:P=TS+40*R0+C0
#* RS is 22, CS is 39
# example R0 = 11, C0 = 15, P=31848+40*R0+C0
$ R0 = 11
$ C0 = 15
$ P = 32303

# If room size will take us beyond map limit, don't use this room
420 IFP+40*L+W>=TS+SZTHEN530
420 IF 32303+40*4+6 >= TS+SZ THEN (GOTO) 530	

# The GOTO 530 checks to see if we've run out of time
# to build the dungeon. So the computer will keep 
# building until the countdown is over!

#* This checks to see if this space is taken up. If it is, then we goto 530... 
430 FORN=0TOL+1:FORN1=0TOW+1:IFPEEK(P+(N*40)+N1)<>32THEN530
440 NEXTN1,N

#* This puts char160, which is a filled in solid block into the room area.
450 FORN=1TOL:FORN1=1TOW:POKEP+(N*40)+N1,160:NEXTN1,N

#* Generate vertical passages from generated room down.
460 FORN=P+42+(L*40)TOTS+999STEP40
# FOR N = (P=start of room in memory) + 42 + (Length*40) to (TS = 31848)+999=32847 - Step every 40
470 IFPEEK(N)=160THENFORN1=P+42TONSTEP40:POKEN1,160:NEXT:POKEN1-80,102:GOTO490
480 NEXTN

#* Generate horizontal passages from generate room right.
490 FORN=P+81+WTOP+121+W:IF(N-TS)/40=INT((N-TS)/40)THEN520
500 IFPEEK(N)=160THENFORN1=P+81TON-1:POKEN1,160:NEXT:POKEN1-1,102:GOTO520
510 NEXT

#* Generate a monster in the room. Every room has a monster, huh?
520 S=INT(RND(1)*L)+1:S1=INT(RND(1)*W+1):POKEP+S1+S*40,INT(RND(1)*6+214)

# Timer check - if we've enough time, continue building rooms.
530 IFTI<TMTHEN380

#* Generate gold
540 FORN=1TO11
550 U=INT(RND(1)*SZ)+TS:IFPEEK(U)<>160THEN550
560 POKEU,135:HG=HG+1:NEXT

#* Generate borders (I think)
570 FORR0=0TORS:POKETS+40*R0,127:POKETS+40*R0+CS,127:NEXTR0
580 FORC0=0TOCS:POKETS+C0,127:POKETS+C0+40*RS,127:NEXTC0
590 RETURN
# === END SUB Generate dungeon


# SUB == evaluate player move and what they see as a result
# NOTE: K, J, M are not used! I think they're leftovers from when perhaps
# Brian intended on implementing SM mode / SEE further mode!
# That's why S costs HP - you will see 2 squares in each direction, not just one. 
# He just never finished it, apparently. 
600 K=-40:J=3:M=40:R=3:GN=0
610 IFSM=1THENK=-80:J=5:M=80:R=4:SM=0

# O is meant to give the location to view from, taking into account where memory stops/starts.
620 O=L-32767-R
630 IFO+32811>33768THENM=0

# Look at what is around from the dungeon map and put it on the screen
640 FORN=-40TO40STEP40:FORN1=1TO3:IFN=0ANDN1=2THEN820
650 Y=O+N+N1:V=PEEK(Y+TS):POKEY+AX,V

# If we've only revealed a floor or space, continue with the N/N1 loop
660 IFV<135ORV=160THEN820

# If we've revealed a monster, then go to that code (710)
670 V=V-128:IFV<>7THEN710

# We've revealed gold - how much? Here's a funny by-product of this. Because we redo
# this "what's seen" code, each time we repaint the gold, we recalculate K1! So it's 
# truly random as to what we might find, and that value will always change! Later on,
# we use the latest value of K1 when we actually touch gold. (and repaint the screen.)
# Cute and clever, Brian... you don't have to track the amount when you see it. Just
# use the last value...
680 K1=1+K1+INT((MG+1)*(RND(1)))
# GN and FG are about how often the message "GOLD IS NEAR" is displayed.
# It's an odd way to set up a "we've seen this already" True/False flag.
690 GN=GN+1:IFGN>FGTHENGOSUB1410:PRINT"GOLD IS NEAR!":GOSUB1430:FG=HG+1
700 GOTO820

# Revealed a monster - put a floor in its place on the dungeon map
710 V1=V+128:S=0:POKEY+TS,160
# V is the character representing monster type. I is its HP.
720 IFV=86THENE$="SPIDER":I=3
730 IFV=87THENE$="GRUE":I=7
740 IFV=88THENE$="DRAGON":I=1
750 IFV=89THENE$="SNAKE":I=2
760 IFV=90THENE$="NUIBUS":I=9
770 IFV=91THENE$="WYVERN":I=5
#Generate monster hp
780 I=INT(RND(1)*{Player HP}+(PX/I)+{Player HP}/4)
# if we've generated a previous monster, E holds its position. QQ holds
# what type of monster it is. Put it back on the dungeon map. 
# I guess this implies that only one monster at a time can be 'active'?
790 IFE>0THENPOKETS+E,QQ
800 QQ=V+128:E=Y
810 GOSUB1410:PRINT"A "E$;" WITH";I;"POINTS IS NEAR.":GOSUB1430:CC=I
820 NEXTN1:NEXTN:FG=GN:RETURN
# === END move/what do you see sub


# SUB == Monster reaction/movement AI
830 O1=0:A=0:E1=E+AX:IFABS(E1+40-L)<ABS(E1-L)THENA=40
840 IFABS(E1-40-L)<ABS(E1-L)THENA=-40
850 IF(PEEK(E+A+TS)=209)OR(PEEK(E+A+TS)>128)THENO1=O1+A
860 IFABS(E1-1-L)<ABS(E1-L)THENA=-1
870 IFABS(E1+1-L)<ABS(E1-L)THENA=1
880 IF(PEEK(E+O1+A+TS)=209)OR(PEEK(E+O1+A+TS)>128)THENO1=O1+A
890 A=O1:IFE1+A=LTHEN960
900 IFE1+A<LTHEN940
910 IFA=41THENA=39
920 IFA=-39THENA=-41
930 GOTO960
940 IFA=31THENA=41
950 IFA=-41THENA=-39
960 IFPEEK(E+A+TS)<128THENPOKEE1,V1:RETURN
970 POKEE1,ET:E=E+A:ET=PEEK(E+AX):POKEE+AX,V1:IFE+AX=LTHENET=160:GOSUB1000
980 RETURN

# This code is never reached/run! Same as line 800.
990 QQ=V+128:E=Y


# SUB - AN ATTACK!
1000 GOSUB1410:PRINT"{RVS ON}AN ATTACK!!!":GOSUB1430:PW=HP+EX

#* Calculate how much HP is spent for player/monster - both hit!
1010 H1=RND(1)*CC/2+CC/4:CH=RND(1)*PW/2+PW/4:CC=INT(CC-CH):HP=INT(HP-H1)
#* If Player HP 0 or less, go to death routine
1020 IFHP<1THEN1190
#* Monster will negotiate if their HP is more than 2x higher than player
1030 IF(CC/({Player HP}+1)<2)THEN1090
1040 GOSUB1410:PRINT"THE "E$" WILL LEAVE..":GOSUB1430
1050 GOSUB1410:PRINT"IF YOU GIVE IT HALF YOUR GOLD.":GOSUB1430
1060 GOSUB1410:PRINT"WILL YOU CONSENT TO THIS (Y OR N) ";
1070 GOSUB1500

==> GOSUB 1500
# Input routine - makes ? blink, puts value in L$
<== RETURN FROM 1500

#* If yes, then monster disappears! 
1080 IFL$="Y"THENMG=MG-MG/2:W=160:E=0:S=0:POKEL,209:RETURN

#* if monster is still alive.
1090 IFCC>1THEN1160

#* if monsters is dead
1100 GOSUB1410:W=160:S=0:E=0:POKEL,209:PRINT"THE "E$" IS DEAD!":GOSUB1430
# Monsters HP is experience reward. Increment monster kill counter.
1110 EX=EX+I:Z=Z+1
# If we haven't doubled our experience, then return
1120 IFEX<PX*2THEN1180
#Otherwise, set our next levelup point, increase our HP
1130 PX=EX:{Player HP}={Player HP}*3
#Print a message and delay.
1140 GOSUB1410:PRINT"YOUR HIT PTS. HAVE BEEN RAISED.":GOSUB1430
1150 GOTO1180

# monster is still alive!
1160 GOSUB1410:PRINT"THE "E$" HAS"CC"HIT POINTS":GOSUB1430
1170 GOSUB1340
1180 RETURN
# === END Attack Sub


#* SUB Death routine - display final status 
1190 GOSUB1410:PRINT"YOU'RE DEAD!":GOSUB1430:GOTO1350


#* SUB found gold routine
# Display how much gold found - K1 is calculated elsewhere
1200 MG=MG+K1:GOSUB1410:PRINT"YOU FOUND"K1"GOLD PIECES!":GOSUB1430
#*Now replace the gold with space on dungeon map
1210 POKEL-AX+TS,160:W=160
#* If there's still hidden gold, continue playing. Otherwise, end game!
1220 HG=HG-1:IFHG>0THENRETURN
1230 GOTO1350


#* SUB - Get player move
1240 IFIU=0THENGOSUB1430

==> GOSUB 1430
1430 TM=TI+3*60:IU=1:RETURN
<== RETURN from 1430

1250 GOSUB1340

== > 1340
#* Refresh status line
1340 PRINTE2$;"HIT PTS.";INT({Player HP}+.5);"{LEFT}  EXP.";EX;"{LEFT}  GOLD";MG;"   ":RETURN
<== RETURN FROM 1340

1260 IF IU THEN IF TI>TM THEN GOSUB1410: PRINT"YOU MAY MOVE."

#* Get player input - set it to a known value
# What this does is to convert values into the < 127 range. 
# If a player is moving "shifted" - they can go through walls. 
# but it will cost them HP (elsewhere). 
1270 GETL$:IFL$=""THEN1260
1280 A=ASC(L$):SX=ABS(A>127):A=AAND127

#* If waiting in place regain {Player HP}
1290 IFA=ASC("5")THEN{Player HP}={Player HP}+1+SQR(EX/{Player HP})

#* player can move on keypad in any direction. A holds the value of their move
# converted to 123456789 
1300 IFA>48ANDA<58THENA=A-48:TM=0:GOSUB1410:RETURN

#* not sure what "S" does but it reduces {Player HP}! Not sure what SM=1 does yet either.
1310 IFL$="S"THENSM=1:{Player HP}={Player HP}-2 

#*quit
1320 IFL$="Q"THEN1350
1330 GOTO1250
#=== End of get player move sub


#* SUB - Refresh status line 1
1340 PRINTE2$;"HIT PTS.";INT({Player HP}+.5);"{LEFT}  EXP.";EX;"{LEFT}  GOLD";MG;"   ":RETURN


#* SUB - Display game totals
1350 GOSUB1410:PRINTE2$;"GOLD:";MG;" EXP:";EX;" KILLED";Z;"BEASTS"


#* SUB - This routine displays the map and asks if player wants to go again
1360 FORN=BLTOSZ-1+BL:A=PEEK(TS+N):POKEAX+N,A:NEXT
1375 GETL$:IFL$<>""THEN1375
1380 GOSUB1410:PRINT"WANT TO PLAY AGAIN";
1390 GOSUB1500:IFL$<>"N"THEN180
1400 TM=0:GOSUB1410:PRINT"{UP}";:END


# SUB - Input delay. I think about a second or so. 
1410 IF IU THEN IF TI<TM THEN 1410
1420 PRINTER$;:IU=0:RETURN


# SUB - not sure yet. IU seems to possibly be another magical value or
# some sort of control. This seems to force TM to be higher value by 3 seconds than 
# TI which is the internal clock. Maybe this along with 1410 is how input happens?
1430 TM=TI+3*60:IU=1:RETURN


# SUB - Ends up never being called/used. 
1440 IFPEEK(32768)=0THENSTOP
1450 RETURN


# SUB - This makes the question mark blink every 5 seconds or so. 
1500 ZT=0:ZC=1
1510 GETL$:IFL$<>""THEN1550
1520 IFTI>ZTTHENPRINTMID$("? ",ZC,1);"{LEFT}";:ZT=TI+30:ZC=3-ZC
1530 GOTO1510
1550 PRINT"? ";L$:RETURN


#* SUB - Clear screen - reset all variables - Start game (goto 100)
60300 PRINT"{CLEAR}":CLR:GOSUB60400:GOTO100


#* SUB - Which BASIC do I have? Set vars that will be used by various
# PEEKS/POKES that are system related.
# QM is the "top of memory" - when it ends
# QK is the num of chars in keyboard buffer
# QP is the location that says what key is pressed.
# 134 = 0x86, 52 = 0x34
# Assume Basic 1
60400 QK=525:QM=134:QP=515:CR$=CHR$(13)
60410 IFPEEK(50000)=0THENRETURN  # This check confirms BASIC 1 - not sure how/why but there you have it.
60420 QK=158:QM=52:QP=151   #Not Basic 1, these are Basic 2/4 values
60430 RETURN


#* SUB print 40 "lines" (CHR$(192) apparently)
60500 FORI=1TO10:PRINT"{192}{192}{192}{192}";:NEXTI:RETURN


#* SUB - Print intro
62000 PRINT"{CLEAR}{DOWN}{DOWN}";TAB(9);"CURSOR #";NM$;"  ";PG$
62010 PRINT"{DOWN} COPYRIGHT (C) 1979  BY BRIAN SAWYER{DOWN}"
62020 GOSUB60500  # Print a line across the screen
62030 PRINT"{DOWN}SEARCH FOR GOLD IN THE ANCIENT RUINS"
62080 PRINT"{DOWN}{DOWN}{DOWN}PRESS {RVS ON}RETURN{RVS OFF} TO BEGIN"
62090 GETT$:IFT$=""THEN62090
62100 GOTO60300